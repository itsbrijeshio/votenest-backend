// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String // Hashed password
  polls     Poll[] // ✅ User created polls
  votes     Vote[] // ✅ User votes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Poll {
  id          String    @id @default(uuid())
  title       String
  description String?
  isPublic    Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  options Option[] // One-to-many
  votes   Vote[] // One-to-many
}

model Option {
  id     String @id @default(uuid())
  text   String
  poll   Poll   @relation(fields: [pollId], references: [id])
  pollId String
  votes  Vote[] // One-to-many
}

model Vote {
  id        String   @id @default(uuid())
  
  // Either userId or ipAddress must be present
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  // Optional for IP-based votes

  ipAddress String?  // Optional for user-based votes

  option    Option   @relation(fields: [optionId], references: [id])
  optionId  String

  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String

  createdAt DateTime @default(now())

  @@unique([userId, pollId])
  @@unique([ipAddress, pollId])
}
